#!/usr/bin/env python
PACKAGE = "fcu_io"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

board = gen.add_group("Board Configuration")
mixer_enum = gen.enum([ gen.const("QUADCOPTER_PLUS", int_t, 0, "Quadcopter Plus Configuration"),
                        gen.const("QUADCOPTER_X", int_t,    1, "Quadcopter Plus Configuration"),
                        gen.const("QUADCOPTER_H", int_t,    2, "Quadcopter Plus Configuration"),
                        gen.const("TRICOPTER", int_t,       3, "Quadcopter Plus Configuration"),
                        gen.const("Y6", int_t,              4, "Quadcopter Plus Configuration"),
                        gen.const("FIXEDWING", int_t,       5, "Quadcopter Plus Configuration")],
                        "Mixers")
board.add("BOARD_REV", int_t, 0, "Major Board Revision", 5, 0, 10)
board.add("MIXER", int_t, 0, "Airframe Mixer", 0, 0, 5)

mavlink = gen.add_group("MAVlink Configuration")
baudrate_enum = gen.enum([ gen.const("9600",   int_t, 9600, "9600"),
                           gen.const("57600",  int_t, 57600, "57600"),
                           gen.const("115200", int_t, 115200, "115200"),
                           gen.const("256000", int_t, 256000, "256000"),
                           gen.const("460800", int_t, 460800, "460800"),
                           gen.const("921600", int_t, 921600, "921600")],
                     "Supported serial baud rates")
mavlink.add("BAUD_RATE", int_t, 0, "Serial baud rate", 921600, 9600, 921600, edit_method=baudrate_enum)
mavlink.add("SYS_ID", int_t, 0, "MAVlink System ID", 1, 0, 1000)
mavlink.add("STRM_HRTBT", int_t, 0, "Heartbeat stream rate (Hz)", 1, 0, 1000)
mavlink.add("STRM_ATTITUDE", int_t, 0, "Attitude stream rate (Hz)", 50, 0, 1000)
mavlink.add("STRM_IMU", int_t, 0, "IMU stream rate (Hz)", 500, 0, 1000)
mavlink.add("STRM_MAG", int_t, 0, "Magnetometer stream rate (Hz)", 0, 0, 1000)
mavlink.add("STRM_BARO", int_t, 0, "Barometer stream rate (Hz)", 50, 0, 1000)
mavlink.add("STRM_AIRSPEED", int_t, 0, "Airspeed stream rate (Hz)", 50, 0, 1000)
mavlink.add("STRM_GPS", int_t, 0, "GPS stream rate (Hz)", 0, 0, 1000)
mavlink.add("STRM_SONAR", int_t, 0, "Sonar stream rate (Hz)", 25, 0, 1000)
mavlink.add("STRM_SERVO", int_t, 0, "Raw servo/motor signal stream rate (Hz)", 50, 0, 1000)
mavlink.add("STRM_RC", int_t, 0, "Raw RC signal stream rate (Hz)", 50, 0, 1000)

sensors = gen.add_group("Sensor Configuration")
sensors.add("DIFF_PRESS_UP", int_t, 0, "Airspeed update period (us)", 0, 0, 100000)
sensors.add("BARO_UPDATE", int_t, 0, "Barometer update period (us)", 0, 0, 100000)
sensors.add("SONAR_UPDATE", int_t, 0, "Sonar update period (us)", 0, 0, 100000)
sensors.add("MAG_UPDATE", int_t, 0, "Magnetometer update period (us)", 20000, 0, 100000)

estimator = gen.add_group("Estimator Configuration")
estimator.add("FILTER_INIT_T", int_t, 0, "Initialization time for complementary filter (ms)", 3000, 0, 10000)
estimator.add("FILTER_KP", double_t, 0, "Mahoney filter kp gain", 1.0, 0.0, 10.0)
estimator.add("FILTER_KI", double_t, 0, "Mahoney filter ki gain", 0.1, 0.0, 1.0)
estimator.add("STRM_ADJUST_GYRO", bool_t, 0, "Whether to stream gyro rates adjusted by mahoney filter bias estimates", True)
estimator.add("GYRO_X_BIAS", double_t, 0, "gyroscope x bias", 0.0)
estimator.add("GYRO_Y_BIAS", double_t, 0, "gyroscope y bias", 0.0)
estimator.add("GYRO_Z_BIAS", double_t, 0, "gyroscope z bias", 0.0)
estimator.add("ACC_X_BIAS", double_t, 0, "accelerometer x bias", 0.0)
estimator.add("ACC_Y_BIAS", double_t, 0, "accelerometer y bias", 0.0)
estimator.add("ACC_Z_BIAS", double_t, 0, "accelerometer z bias", 0.0)
estimator.add("ACC_X_TEMP_COMP", double_t, 0, "accelerometer x axis temperature compensation constant", 0.0)
estimator.add("ACC_Y_TEMP_COMP", double_t, 0, "accelerometer y axis temperature compensation constant", 0.0)
estimator.add("ACC_Z_TEMP_COMP", double_t, 0, "accelerometer z axis temperature compensation constant", 0.0)

motors = gen.add_group("Motor Configuration")
motors.add("MOTOR_PWM_UPDATE", int_t, "Period of PWM sent to Servos/Motors",  400, 50, 1000)
motors.add("MOTOR_IDLE_PWM", int_t, "minimum PWM signal sent to armed motors (us)",  1150, 1000, 2000)
motors.add("ARM_SPIN_MOTORS", bool_t, "Whether to spin motors when armed",  True)  # I don't think we are using this

rc = gen.add_group("RC Configuration")
rc_channel_enum = gen.enum([ gen.const("1", int_t, 0, "1"),
                             gen.const("2", int_t, 1, "2"),
                             gen.const("3", int_t, 2, "3"),
                             gen.const("4", int_t, 3, "4"),
                             gen.const("5", int_t, 4, "5"),
                             gen.const("6", int_t, 5, "6"),
                             gen.const("7", int_t, 6, "7"),
                             gen.const("8", int_t, 7, "8")],
                             "RC Channels")
rc_enum = gen.enum([ gen.const("Parallel PWM", int_t, 0, "Parallel PWM"),
                     gen.const("CPPM", int_t, 1, "CPPM")],
                     "RC Types")
rc.add("RC_TYPE",  int_t, 0, "RC type", 1, 0, 1, edit_method=rc_enum)
rc.add("RC_X_CHN", int_t, 0, "RC Channel Controlling X (roll) axis", 0, 0, 7, edit_method=rc_channel_enum)
rc.add("RC_Y_CHN", int_t, 0, "RC Channel Controlling Y (pitch) axis", 1, 0, 7, edit_method=rc_channel_enum)
rc.add("RC_Z_CHN", int_t, 0, "RC Channel Controlling Z (yaw) axis", 3, 0, 7, edit_method=rc_channel_enum)
rc.add("RC_F_CHN", int_t, 0, "RC Channel Controlling F (throttle) axis", 2, 0, 7, edit_method=rc_channel_enum)

rc.add("RC_ATT_OVRD_CHN", int_t, 0, "RC Channel for controlling safety pilot override of attitude", 4, 0, 7, edit_method=rc_channel_enum)
rc.add("RC_THR_OVRD_CHN", int_t, 0, "RC Channel for controlling safety pilot override of throttle", 4, 0, 7, edit_method=rc_channel_enum)
rc.add("RC_ATT_CTRL_CHN", int_t, 0, "RC Channel for controlling RC attitude control type (rate or angle)", 5, 0, 7, edit_method=rc_channel_enum)
rc.add("RC_F_CTRL_CHN", int_t, 0, "RC Channel for controlling RC throttle control type (throttle or altitude)", 5, 0, 7, edit_method=rc_channel_enum)

rc.add("RC_X_CENTER", int_t, 0, "PWM at center sticks on X axis", 1500, 1000, 2000)
rc.add("RC_Y_CENTER", int_t, 0, "PWM at center sticks on Y axis", 1500, 1000, 2000)
rc.add("RC_Z_CENTER", int_t, 0, "PWM at center sticks on Z axis", 1500, 1000, 2000)
rc.add("RC_F_BOTTOM", int_t, 0, "PWM at bottom of F axis", 1000, 1000, 2000)
rc.add("RC_X_RANGE", int_t, 0, "PWM range of X axis", 1000, 0, 1200)
rc.add("RC_Y_RANGE", int_t, 0, "PWM range of Y axis", 1000, 0, 1200)
rc.add("RC_Z_RANGE", int_t, 0, "PWM range of Z axis", 1000, 0, 1200)
rc.add("RC_F_RANGE", int_t, 0, "PWM range of F axis", 1000, 0, 1200)

rc.add("ARM_STICKS", bool_t, 0, "Arm the FCU using sticks if true", True)
rc.add("ARM_THRESHOLD", int_t, 0, "When using sticks, the deviation required for sensing arm/disarm position (us)", 150, 0, 1000)
rc.add("ARM_CHANNEL", int_t, 0, "If not using sticks to arm, this channel will arm the FCU", 5, 0, 7, edit_method=rc_channel_enum)

rc.add("RC_MAX_ROLL", double_t, 0, "Mapping from full-stick RC input to rad", 0.786, 0.0, 3.14159)
rc.add("RC_MAX_PITCH", double_t, 0, "Mapping from full-stick RC input to rad", 0.786, 0.0, 3.14159)
rc.add("RC_MAX_ROLLRATE", double_t, 0, "Mapping from full-stick RC input to mrad/s", 12.566, 0.0, 12.566)
rc.add("RC_MAX_PITCHRATE", double_t, 0, "Mapping from full-stick RC input to mrad/s", 12.566, 0.0, 12.566)
rc.add("RC_MAX_YAWRATE", double_t, 0, "Mapping from full-stick RC input to mrad/s", 6.283, 0, 12.566)

override = gen.add_group("Safety Pilot Override Configuration")
override.add("RC_OVRD_DEV", int_t, 0,  "Amount of deviation from center sticks required to enable RC override (us)", 100)
override.add("OVRD_LAG_TIME", int_t, 0,  "Amount of time after override to lag before reverting control to onboard computer (ms)", 1000)
override.add("MIN_THROTTLE", bool_t, 0,  "Whether to take the min throttle between onboard and offboard control", False)

controller = gen.add_group("Controller Gains")
controller.add("PID_ALT_P", double_t, 0,  "P gain on Altitude Controller", 10.0, 0.0, 20.0)
controller.add("PID_ALT_I", double_t, 0,  "I gain on Altitude Controller", 0.0, 0.0, 20.0)
controller.add("PID_ALT_D", double_t, 0,  "D gain on Altitude Controller", 0.0, 0.0, 20.0)
controller.add("HOVER_THROTTLE", int_t, 0,  "Throttle required to Hover (us)", 1000, 1000, 2000)

controller.add("PID_ROLL_ANG_P", double_t, 0,  "P gain on Roll Angle Controller", 150.0, 0.0, 500.0)
controller.add("PID_ROLL_ANG_I", double_t, 0,  "P gain on Roll Angle Controller", 0.0, 0.0, 500.0)
controller.add("PID_ROLL_ANG_D", double_t, 0,  "P gain on Roll Angle Controller", 70.0, 0.0, 500.0)
controller.add("MAX_ROLL_ANG", double_t, 0,  "Maximum desired roll angle allowed in angle mode (rad)", 0.786, 0.0, 3.14159)

controller.add("PID_PITCH_ANG_P", double_t, 0,  "P gain on pitch angle controller",  150.0, 0.0, 500.0)
controller.add("PID_PITCH_ANG_I", double_t, 0,  "I gain on pitch angle controller",  0.0, 0.0, 500.0)
controller.add("PID_PITCH_ANG_D", double_t, 0,  "D gain on pitch angle controller",  70.0, 0.0, 500.0)
controller.add("MAX_PITCH_ANG", double_t, 0,  "Maximum desired pitch angle allowed in angle mode (rad)",  0.786, 0.0, 3.14159)

controller.add("PID_ROLL_RATE_P", double_t, 0,  "P gain on roll rate controller", 70.00, 0.0, 500.0)
controller.add("PID_ROLL_RATE_I", double_t, 0,  "I gain on roll rate controller", 0.00, 0.0, 500.0)
controller.add("MAX_ROLL_RATE", double_t, 0,  "Maximum desired roll rate allowed in rate mode (rad/s)", 12.566, 0.0, 50.0)

controller.add("PID_PITCH_RATE_P", double_t, 0, "P gain on pitch rate controller", 70.00, 0.0, 500.0)
controller.add("PID_PITCH_RATE_I", double_t, 0, "I gain on pitch rate controller", 0.00, 0.0, 500.0)
controller.add("MAX_PITCH_RATE", double_t, 0, "Maximum desired pitch rate allowed in rate mode (rad/s)", 12.566, 0.0, 50.0)

controller.add("PID_YAW_RATE_P", double_t, 0,  "P gain on yaw rate controller", 25.0, 0.0, 50.0)
controller.add("PID_YAW_RATE_I", double_t, 0,  "I gain on yaw rate controller", 0.0, 0.0, 50.0)
controller.add("MAX_YAW_RATE", double_t, 0,  "Maximum desired yaw rate allowed in rate mode (rad/s)", 6.283, 0.0, 50.0)

controller.add("PARAM_MAX_CMD", int_t, 0,  "Maximum command allowed to pass into the mixer from a single channel", 1000, 0, 1200)

fixed_wing = gen.add_group("Fixed Wing MAV Configuration")
fixed_wing.add("FIXED_WING", bool_t, 0, "Fixed Wing Flag",  False)
fixed_wing.add("ELEVATOR_REV", bool_t, 0, "Elevator Servo Reversed",   False)
fixed_wing.add("AIL_REV", bool_t, 0, "Aileron Servo Reversed",   False)
fixed_wing.add("RUDDER_REV", bool_t, 0, "Rudder Servo Reversed",   False)

exit(gen.generate(PACKAGE, "fcu_io", "param")) # Creates paranConfig.h (same name as file)
